module Playdate

#$include "Event.rogue"
#$include "Keyboard.rogue"
#$include "Pointer.rogue"

#$include "UIAbsoluteLayout.rogue"
#$include "UIAttributes.rogue"
#$include "UIBorder.rogue"
#$include "UIComponent.rogue"
#$include "UIContent.rogue"
#$include "UIFiller.rogue"
#$include "UIFlowLayout.rogue"
#$include "UIFont.rogue"
#$include "UIHorizontalLayout.rogue"
#$include "UILabel.rogue"
#$include "UILayout.rogue"
#$include "UIList.rogue"
#$include "UIModifier.rogue"
#$include "UIPlacement.rogue"
#$include "UIScrollView.rogue"
#$include "UIScrollViewController.rogue"
#$include "UISpacer.rogue"
#$include "UIStackLayout.rogue"
#$include "UITableLayout.rogue"
#$include "UIText.rogue"
#$include "UITheme.rogue"
#$include "UIVerticalLayout.rogue"
#$include "UIWidget.rogue"

class View : UI
  GLOBAL PROPERTIES
    current : View

  PROPERTIES
    canvas         : Canvas
    view_state     = ViewState().[ view=this ]
    last_update_ms : Int32

  METHODS
    method init
      init( Display )

    method init( canvas )
      canvas.view = this
      bounds = Box( 0, 0, canvas.size )
      request_redraw
      prior.init

    method activate
      prior.activate
      View.current = this

    method change_state( new_state:ViewState )
      view_state.change_state( new_state )

    method default_font->UIFont
      return null

    method draw
      activate
      if (dirty_bounds)
        temporarily clip = dirty_bounds
          dirty_bounds = null
          view_state.on_draw
          on_draw
          (forEach in layers).draw( clip.value )
          after_draw
          view_state.after_draw
        endTemporarily
      endIf

    method request_redraw
      dirty_bounds = Box(canvas.size)

    method request_redraw( bounds:Box? )
      dirty_bounds |= bounds

    method update( bounds:Box )
      activate

      if (not is_initialized)
        is_initialized = true
        on_init
      endIf
      local cur_time_ms = System.elapsed_ms
      local elapsed_ms  = cur_time_ms - last_update_ms
      local n           = (elapsed_ms * 60) / 1000.0
      if (n < 1 or n > 15) n = 1
      while (n >= 0.75)
        _advance_state
        view_state.on_update
        on_update
        if (actions) actions .= update
        (forEach in layers).update
        after_update
        view_state.after_update
        --n
      endWhile
      last_update_ms = cur_time_ms

      update_layout( bounds )

    method _advance_state
      while (view_state._exit_state)
        view_state._exit_state = false
        view_state.on_exit
        view_state = which{ view_state.next_state || ViewState() }
        view_state.on_enter
      endWhile

endClass

