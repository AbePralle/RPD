module Playdate

class View : UI
  PROPERTIES
    view_state     = ViewState().[ view=this ]
    last_update_ms : Int32

  METHODS
    method init
      Display.view = this
      bounds = Box( 0, 0, Display.size )
      request_redraw
      prior.init

    method change_state( new_state:ViewState )
      view_state.change_state( new_state )

    method default_font->UIFont
      return null

    method draw
      activate

      if (needs_redraw) request_redraw

      if (dirty_bounds)
        temporarily clip = dirty_bounds
          dirty_bounds = null
          view_state.on_draw
          on_draw
          (forEach in layers).draw( clip.value )
          (forEach in layers).apply( (component) => component.is_dirty=false )
          after_draw
          view_state.after_draw
        endTemporarily
      endIf

    method request_redraw
      dirty_bounds = Box(bounds.size)

    method request_redraw( bounds:Box? )
      dirty_bounds |= bounds

    method update( bounds:Box )
      activate

      if (not is_initialized)
        is_initialized = true
        on_init
      endIf
      local cur_time_ms = System.elapsed_ms
      local elapsed_ms  = cur_time_ms - last_update_ms
      local n           = (elapsed_ms * 60) / 1000.0
      if (n < 1 or n > 15) n = 1
      while (n >= 0.75)
        _advance_state
        view_state.on_update
        on_update
        if (actions) actions .= update

        (forEach in layers).update

        forEach (layer in layers step -1)
          if (layer.discard( $.is_dead ) is null) layers.remove( layer )
        endForEach

        after_update
        view_state.after_update
        --n
      endWhile
      last_update_ms = cur_time_ms

      update_layout( bounds )

    method _advance_state
      while (view_state._exit_state)
        view_state._exit_state = false
        view_state.on_exit
        view_state = which{ view_state.next_state || ViewState() }
        view_state.view = this
        view_state.on_enter
      endWhile

endClass

