# To run this build file, install Rogue from github.com/AbePralle/Rogue then cd
# to this folder and type "rogo" at the command line.

$define DEFAULT_RPD "https://github.com/AbePralle/RPD.git#main"

if (File.exists("Libraries/Framework/Playdate/Template"))
  error "Rogo must be run from the RPD project folder, not the RPD library folder."
endIf

routine rogo_default
  # Configures this RPD project if necessary. Executed via 'rogo' with no other args.
  configure
  rogo_help
endRoutine

routine rogo_sim
  # Build and run on the Playdate simulator.
  configure
  build( &simulator )
  rogo_run
endRoutine

routine rogo_clean
  # Delete all intermediate and output files.
  configure
  File.delete( "Build" )
  println "Build/ folder deleted."
endRoutine

routine rogo_device
  # Build for Playdate hardware and show the compiled "Device" file.
  configure
  build( &!simulator, &show )
endRoutine

routine rogo_build
  # Build for the Playdate simulator.
  configure
  build( &simulator )
endRoutine

routine rogo_build_simulator
  # Build for the Playdate simulator.
  configure
  build( &simulator )
endRoutine

description( "build device", "Build a \"Device\" file targeting Playdate hardware." )

routine rogo_build_device
  # Build a "Device" file targeting Playdate hardware.
  configure
  build( &!simulator )
endRoutine

routine rogo_run
  # Run the previous build on the Playdate simulator.
  configure
  run( "Simulator" )
endRoutine

routine rogo_details
  # Adjust the project details such as Title and Author.
  configure
  local settings = JSON.load(File("Settings.json"))
  local details  = settings//details
  local old_title = details//title->String
  input_setting( details, "title",       "Game Title" )

  if (details//title != old_title)
    # Adjust default filename based on new title
    use builder = StringBuilder.pool
      forEach (ch in details//title->String)
        if (ch.is_letter) builder.print( ch )
      endForEach
      details//filename = builder->String
    endUse
  endIf
  input_setting( details, "filename",    "Base Filename" )

  input_setting( details, "author",      "Author" )
  input_setting( details, "description", "Description" )
  input_setting( details, "bundle_id",   "Bundle ID" )
  println "Settings.json updated."
  settings.save( "Settings.json" )
endRoutine

routine build( &simulator, &show )
  local target = which{ simulator:"Simulator" || "Device" }
  local folder = "Build/$"(target)
  File.create_folder( folder )
  File.create_folder( folder/"Source" )
  File.sync_from( "Source", folder/"Source" )

  local files = File.listing( folder/"Source/**.c" )
  forEach (file in rewriter=files.rewriter)
    rewriter.write( file.after_first(folder+'/') )
  endForEach

  local settings = JSON.load(File("Settings.json"))
  local details  = settings//details

  local cmake_lists = String(File("Project/CMakeLists.txt"))
  cmake_lists .= replacing( "$(FILENAME)", details//filename->String )
  cmake_lists .= replacing( "$(C_FILES)", files.join(' ') )
  File.save( folder/"CMakeLists.txt", cmake_lists )

  local makefile = String(File("Project/Makefile"))
  makefile .= replacing( "$(FILENAME)", details//filename->String )
  makefile .= replacing( "$(C_FILES)", files.join(" \\\n\t") )
  File.save( folder/"Makefile", makefile )

  local pdxinfo = String(File("Project/Source/pdxinfo"))
  pdxinfo .= replacing( "$(TITLE)",       details//name->String )
  pdxinfo .= replacing( "$(AUTHOR)",      details//author->String )
  pdxinfo .= replacing( "$(DESCRIPTION)", details//description->String )
  pdxinfo .= replacing( "$(BUNDLE_ID)",   details//bundle_id->String )
  pdxinfo .= replacing( "$(IMAGE_PATH)" , details//image_path->String )
  File.save( folder/"Source/pdxinfo", pdxinfo )

  if (simulator)
    execute "cd $ && cmake . && make"(folder)
  else
    local local_settings = JSON.load_table("LocalSettings.json")
    local path = local_settings//playdate_sdk->String/"C_API/buildsupport/arm.cmake"
    execute "cd $ && cmake -DCMAKE_TOOLCHAIN_FILE=$ . && make"(folder,File.esc(path))
    local output_path = Process.run("pwd",&env)->String.trimmed/"Build/Device"
    output_path /= "$-Device"(details//filename->String)
    if (File.exists(output_path))
      infobox( "OUTPUT FILE\n"+output_path, &no_sides )
      if (show)
        Process.run( "open -R $"(File.esc(output_path)) )
      endIf
    endIf
  endIf
endRoutine

routine find_playdate_sdk->String
  local path = System.find_program("pdc")
  if (path)
    local result = Process.run( "readlink -f $"(File.esc(path)), &env )
    if (result.success)
      return File.folder(File.folder(result))
    endIf
  endIf
  return null
endRoutine

routine run( target:String )
  local settings = JSON.load(File("Settings.json"))
  local app = "/Users/abe/Developer/PlaydateSDK/bin/Playdate Simulator.app"
  execute "open $ -- Build/$/$.pdx" (File.esc(app),target,settings//details//filename)
endRoutine

routine configure
  if (not System.find_program("cmake"))
    error "'cmake' must be installed."
  endIf

  if (not File.exists("Settings.json"))
    infobox "Enter project details. These can be changed with 'rogo details' or by editing Settings.json."
    local settings = @{
      details:
      {
        title:       "Hello World"
        filename:    "HelloWorld"
        author:      "Developer Name"
        description: "A Playdate game"
        bundle_id:   "com.developer.game"
        image_path:  ""
      }
    }
    settings.save( "Settings.json" )
    rogo_details
  endIf

  if (not File.exists("Libraries/RPD"))
    File.create_folder( "Libraries" )
    install_rpd
  endIf

  File.create_folder( "Project" )
  local files = Files( "Libraries/RPD/Libraries/Framework/Playdate/Template/**" )
  files.remove( "**/Main.c" )
  File.sync_from( files, "Project", &missing_only, &keep_unused, &verbose )

  File.create_folder( "Source" )
  if (not File.exists("Source/Main.c"))
    File.copy( "Libraries/RPD/Libraries/Framework/Playdate/Template/Source/Main.c", "Source", &verbose )
  endIf

  local local_settings = JSON.load_table("LocalSettings.json")
  if (local_settings//playdate_sdk)
    if (not File.exists(local_settings//playdate_sdk->String))
      update_playdate_sdk_location( local_settings, "Updated Playdate SDK location: " )
    endIf
  else
    update_playdate_sdk_location( local_settings, "Found Playdate SDK: " )
  endIf
endRoutine

routine update_playdate_sdk_location( local_settings:Value, located_message:String )
  local path = find_playdate_sdk
  if (not path or not File.exists(path))
    path = Console.input("Unable to locate Playdate SDK. Enter path to SDK: ")
    path = File.expand_path( path )
  endIf
  if (path and File.exists(path))
    local_settings//playdate_sdk = path
    local_settings.save( "LocalSettings.json" )
    println located_message + path
  else
    error "Unable to locate Playdate SDK. Install it from https://play.date/dev/"
  endIf
endRoutine

routine input_setting( table:Value, setting:String, description:String )
  local text = Console.input( "$ [$]: "(description,table[setting]) )
  if (String.exists(text)) table[setting] = text
endRoutine

routine install_rpd( loc="":String )
  #{
  if (not String.exists(loc))
    println "Enter Git URL#branch - can specify URL only or #branch only."
    println "[default: $] " (DEFAULT_RPD)
    loc = Console.input( "> " )
    if (loc == "")
      loc = DEFAULT_RPD
      println loc
    elseIf (not loc.contains('#'))
      loc += DEFAULT_RPD.from_first('#')
    elseIf (loc.begins_with('#'))
      loc = DEFAULT_RPD.before_first('#') + loc
    endIf
  endIf
  }#
  loc = DEFAULT_RPD

  # Clone repo
  local url = loc.before_first( '#' )
  local branch = loc.after_first( '#' )
  infobox "Cloning RPD repo -> Libraries/RPD"
  execute "git clone $ --branch $ $" (url,branch,"Libraries/RPD")
endRoutine

routine error( message:String )
  local lines = ("ERROR\n\n" + message).word_wrap(Console.width-2)
  local len = 0
  len = len.or_larger( (forEach in lines).count )

  print   '\u2554'
  loop (len) print '\u2550'
  println '\u2557'

  forEach (line in lines)
    print   '\u2551'
    print   line.left_justified(len)
    println '\u2551'
  endForEach

  print   '\u255a'
  loop (len) print '\u2550'
  println '\u255d'

  System.exit 1
endRoutine

routine infobox( message:String, &no_sides )
  local lines = message.word_wrap(Console.width-2)
  local len = 0
  len = len.or_larger( (forEach in lines).count )

  if (no_sides)
    loop (len) print '\u2501'
    println

    forEach (line in lines)
      println line
    endForEach

    loop (len) print '\u2501'
    println

  else
    print   '\u250f'
    loop (len) print '\u2501'
    println '\u2513'

    forEach (line in lines)
      print   '\u2503'
      print   line.left_justified(len)
      println '\u2503'
    endForEach

    print   '\u2517'
    loop (len) print '\u2501'
    println '\u251b'
  endIf
endRoutine

routine execute( commands:String, error_message=null:String, &suppress_error )->Logical
  forEach (cmd in LineReader(commands))
    print( "> " ).println( cmd )
    if (0 != System.run(cmd))
      if (suppress_error)
        return false
      else
        if (not error_message) error_message = "Build failed."
        throw Error( error_message )
      endIf
    endIf
  endForEach
  return true
endRoutine

#-------------------------------------------------------------------------------
# Introspection-based Launcher Framework
#-------------------------------------------------------------------------------
# Rogo is a "build your own build system" facilitator. At its core Rogo just
# recompiles build files if needed and then runs the build executable while
# forwarding any command line arguments. This file contains a default framework
# which uses introspection to turn command line arguments into parameterized
# routine calls.

# Example: to handle the command "rogo abc xyz 5", define
# "routine rogo_abc_xyz( n:Int32 )".

# "rogo_default" will run in the absence of any other command line argument.

# The following "comment directives" can be used in this file to control how
# RogueC compiles it and to manage automatic dependency installation and
# linking.

# Each of the following should be on a line beginning with the characters #$
# (preceding whitespace is fine). Sample args are given.

#   ROGUEC       = roguec       # Path to roguec to compile this file with
#   ROGUEC_ARGS  = --whatever   # Additional options to pass to RogueC
#   CPP          = g++ -Wall -std=gnu++11 -fno-strict-aliasing
#                  -Wno-invalid-offsetof   # C++ compiler path and/or invocation
#   CPP_ARGS     = -a -b -c          # Additional C++ args
#   LINK         = true              # Links following LIBRARIES with this Build
#                                    # file (otherwise just installs them)
#   LINK         = -lalpha -lbeta    # Links following LIBRARIES and includes
#                                    # these additional flags
#   LINK         = false             # Linking turned off for following
#                                    # LIBRARIES - info can still be obtained
#                                    # from $LIBRARY_FLAGS()
#   LINK(macOS)  = ...               # Options applying only to
#                                    # System.os=="macOS" (use with any OS and
#                                    # any comment directive)
#   LIBRARIES    = libalpha
#   LIBRARIES    = libbeta(library-name)
#   LIBRARIES    = libfreetype6-dev(freetype2)
#   DEPENDENCIES = Library/Rogue/**/*.rogue
#
#   LIBRARIES    = name(package)
#   LIBRARIES    = name(package:<package> install:<install-cmd>
#                  link:<link-flags> which:<which-name>)
#
# The following macro is replaced within this file (Build.rogue) - the libraries
# should normally also be declared in #$ LIBRARIES:
#
#   $LIBRARY_FLAGS(lib1,lib2)                              # sample macro
#     ->
#   -Ipath/to/lib1/include -Lpath/to/lib1/library -I ...   # sample replacement

routine syntax( command:String, text:String )
  Build.rogo_syntax[ command ] = text
endRoutine

routine description( command:String, text:String )
  Build.rogo_descriptions[ command ] = text
endRoutine

routine help( command:String, description=null:String, syntax=null:String )
  if (description) Global.description( command, description )
  if (syntax)      Global.syntax( command, syntax )
endRoutine

try
  Build.launch
catch (err:Error)
  Build.rogo_error = err
  Build.on_error
endTry

class Build [singleton]
  PROPERTIES
    rogo_syntax         = StringTable<<String>>()
    rogo_descriptions   = StringTable<<String>>()
    rogo_prefix         = ?:{ $moduleName.count:$moduleName "::" || "" } + "rogo_" : String
    rogo_command        = "default"
    rogo_args           = @[]
    rogo_error          : Error

    LOCAL_SETTINGS_FILE = "Local.settings"

  METHODS
    method launch
      rogo_args.add( forEach in System.command_line_arguments )
      read_defs
      on_launch
      parse_args
      dispatch_command

    method dispatch_command
      local m = find_command( rogo_command )
      require m || "no such routine rogo_$()" (rogo_command)

      local args = @[]
      forEach (arg in rogo_args)
        which (arg)
          case "true":  args.add( true )
          case "false": args.add( false )
          case "null":  args.add( NullValue )
          others:       args.add( arg )
        endWhich
      endForEach
      if (m.parameter_count == 1 and args.count > 1) args = @[ args ] # Wrap args in a ValueList.
      m( args )

    method find_command( name:String )->MethodInfo
      return <<Global>>.find_global_method( rogo_prefix + name )

    method on_error
      local w = Console.width.or_smaller( 80 )
      Console.error.println "=" * w
      Console.error.println rogo_error
      Console.error.println "=" * w
      on_exit
      System.exit 1

    method on_command_found
      noAction

    method on_command_not_found
      local w = Console.width.or_smaller( 80 )
      println "=" * w
      println "ERROR: No such command '$'." (rogo_args.first)
      println "=" * w
      println
      rogo_command = "help"
      rogo_args.clear
      on_command_found

    method on_launch
      noAction

    method on_exit
      noAction

    method parse_args
      block
        if (rogo_args.count)
          local parts = String[]
          parts.add( forEach in rogo_args )
          rogo_args.clear

          while (parts.count)
            local cmd = _join( parts )
            if (find_command(cmd))
              rogo_command = cmd
              on_command_found
              escapeBlock
            endIf
            rogo_args.insert( parts.remove_last )
          endWhile

          on_command_not_found
        endIf

        # Use default command
        on_command_found
      endBlock

    method read_defs
      read_defs( LOCAL_SETTINGS_FILE )

    method read_defs( defs_filepath:String )
      # Attempt to read defs from Local.settings
      local overrides = String[]
      if (File.exists(defs_filepath))
        forEach (line in LineReader(File(defs_filepath)))
          if (line.contains("="))
            local name  = line.before_first('=').trimmed
            local value = line.after_first('=').trimmed
            if (value.begins_with('"') or value.begins_with('\''))
              value = value.leftmost(-1).rightmost(-1)
            endIf
            local p = <<Build>>.find_property( name )
            if (p)
              overrides.add( "$ = $" (name,value) )
              <<Build>>.set_property( this, p, Value(value) )
            endIf
          endIf
        endForEach
      endIf

    method _join( value:Value )->String
      local args = String[]
      args.add( forEach in value )
      return args.join( "_" )
endClass


routine rogo_help( command="":String )
  # SYNTAX: rogo help [command]
  # Displays help for a specified command or else all build commands.
  command = Build._join( Build.rogo_args )
  if (command.count)
    local syntax = get_syntax( command )
    local success = false
    if (syntax)
      println "SYNTAX"
      println "  " + syntax
      println
      success = true
    endIf
    local description = get_description( command )
    if (description)
      local max_w = Console.width - 2
      println "DESCRIPTION"
      forEach (line in LineReader(description.word_wrapped(max_w)))
        print( "  " ).println( line )
      endForEach
      println
      success = true
    endIf
    if (success)
      return
    else
      local w = Console.width.or_smaller( 80 )
      println "=" * w
      println "ERROR: No such command '$'." (command)
      println "=" * w
      println
    endIf
  endIf

  println "USAGE"
  local lines = String[]
  local max_len = 0
  forEach (m in <<Global>>.global_methods)
    if (m.name.begins_with(Build.rogo_prefix))
      lines.add( "  " + get_syntax(m.name.after_first(Build.rogo_prefix)) )
      max_len .= or_larger( lines.last.count )
    endIf
  endForEach

  max_len += 2
  local max_w = Console.width
  lines.sort( (a,b)=>(a<b) )
  local line_iterator = lines.iterator
  forEach (m in <<Global>>.global_methods)
    if (m.name.begins_with(Build.rogo_prefix))
      local line = line_iterator.read
      print line
      local description = get_description( m.name.after_first(Build.rogo_prefix) )
      if (description)
        loop (max_len - line.count) print ' '
        contingent
          sufficient (max_len + description.count <= max_w)
          if (description.contains(". "))
            description = description.before_first( ". " ) + "."
            sufficient (max_len + description.count <= max_w)
          endIf
          necessary (max_len + 10 <= max_w)
          description = description.unright( (description.count - (max_w - max_len))+3 ) + "..."
        satisfied
          print description
        endContingent
      endIf
      println
    endIf
  endForEach
  println
endRoutine


routine get_syntax( m_name:String )->String
  if (Build.rogo_syntax.contains(m_name))
    return "rogo " + Build.rogo_syntax[ m_name ]
  else
    local m = <<Global>>.find_global_method( Build.rogo_prefix + m_name )
    if (not m) return null
    local line = "rogo $" (m_name.replacing('_',' '))
    line += " <$>" (m.parameter_name(forEach in 0..<m.parameter_count))
    return line
  endIf
endRoutine


routine get_description( m_name:String )->String
  if (Build.rogo_descriptions.contains(m_name))
    return Build.rogo_descriptions[ m_name ]
  else
    return null
  endIf
endRoutine
